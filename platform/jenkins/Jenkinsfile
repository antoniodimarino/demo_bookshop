pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: maven
    image: maven:3.9-eclipse-temurin-17
    command: [ 'sleep' ]
    args: [ '99d' ]
    volumeMounts:
    - name: m2-repo
      mountPath: /root/.m2
  - name: node
    image: node:22-alpine
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: oc
    image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: gitleaks
    image: zricethezav/gitleaks:latest
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: semgrep
    image: returntocorp/semgrep:latest
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: checkov
    image: bridgecrew/checkov:latest
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: trivy
    image: aquasec/trivy:latest
    command: [ 'sleep' ]
    args: [ '99d' ]
  - name: zap
    image: owasp/zap2docker-stable
    command: [ 'sleep' ]
    args: [ '99d' ]
  volumes:
  - name: m2-repo
    emptyDir: {}
"""
        }
        
    }
    environment {
        OCP_API = 'https://api.rm3.7wse.p1.openshiftapps.com:6443'
        OCP_TOKEN_CRED = 'ocp-token'
        OCP_NS = '<nome_progetto_openshift>'
        OCP_NS_PROD = '<nome_progetto_openshift_prod>'

        REGISTRY_URL = 'image-registry.openshift-image-registry.svc:5000'
    }

    stages {
        // CHECKOUT DA GIT
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Analisi Statica Pre-Build') {
            parallel {
                stage('Scansione Credential Leaks') {
                    steps {
                        container('gitleaks') {
                            sh 'gitleaks detect --source="." --verbose -f json -r gitleaks-report.json || true'
                        }
                    }
                    post {
                        always {
                            archiveArtifact 'gitleaks-report.json'
                        }
                    }
                }
                stage('Lint ESLint & HadoLint') {
                    dir('bookshop-frontend'){
                        sh 'npm install'
                        sh 'npm run lint'
                    }

                    sh 'hadolint api-gateway/Dockerfile'
                    sh 'hadolint bookshop-frontend/Dockerfile'
                    sh 'hadolint catalog-service/Dockerfile'
                    sh 'hadolint inventory-service/Dockerfile'
                    sh 'hadolint isbn-service/Dockerfile'
                    sh 'hadolint order-service/Dockerfile'
                    sh 'hadolint payment-service/Dockerfile'
                    sh 'hadolint user-service/Dockerfile'
                }

                stage('SAST Semgrep') {
                    steps {
                        container('semgrep') {
                            sh 'semgrep ci --json -o semgrep-report.json'
                        }
                    }
                    post {
                        always {
                            archiveArtifact 'semgrep-report.json'
                        }
                    }
                }
                stage ('IAC Scan & Compliance Checkov & Conftest') {
                    steps {
                        sh 'checkov -d ./platform/openshift -o json > checkov-openshift.json'
                        sh 'checkov -d ./platform/helm -o json > checkov-helm.json'
                        sh 'helm template ./platform/helm/bookshop | conftest test -p ./policy -o json > conftest-report.json'
                    }
                    post {
                        always {
                            archiveArtifact 'checkov-openshift.json'
                            archiveArtifact 'checkov-helm.json'
                            archiveArtifact 'conftest-report.json'
                        }
                    }
                }
            }
        }

        // BUILD PARENT
        stage('Build Parent POM'){
            steps {
                dir(".") {
                    sh 'mvn -B -DskipTests -N install' //con install creiamo e portiamo su
                }
            }
        }

        // BUILD COMMON //con install creiamo e portiamo su
        stage('Build Common') {
            steps {
                dir("common") {
                    // Use 'install' to put the artifact in the local .m2 repo
                    sh 'mvn -B -DskipTests install'
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Backend e microservizi') {
                    steps {
                        sh 'mvn -B verify' //Esegue test e Int. test
                        sh 'mvn -B org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7'
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('bookshop-frontend') {
                            sh 'npm audit --audit-level=high'
                        }
                    }
                }
            }
        }

        // BUILD MICROSERVIZI //con install creiamo e portiamo su, usiamo package
        stage('Build Services') {
            parallel {
                stage('Build catalog-sercice') {
                    steps {
                        dir("catalog-service") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }

                stage('Build isbn-service') {
                    steps {
                        dir("isbn-service") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }
                
                stage('Build inventory-service') {
                    steps {
                        dir("inventory-service") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }
                
                stage('Build order-service') {
                    steps {
                        dir("order-service") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }
                
                stage('Build payment-service') {
                    steps {
                        dir("payment-service") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }

                stage('Build user-service') {
                    steps { 
                        dir('user-service'){ 
                            sh 'mvn -B -DskipTests package' 
                        } 
                    }
                }
                
                stage('Build api-gateway') {
                    steps {
                        dir("api-gateway") {
                            sh 'mvn -B -DskipTests package'
                        }
                    }
                }
            }
        }

        // OPENSHIFT LOGIN
        stage('OpenShift Login') {
            steps {
                withCredentials([string(credentialsId: env.OCP_TOKEN_CRED, variable: 'TOKEN')]) {
                    sh 'oc login ' + env.OCP_API + ' --token=$TOKEN --insecure-skip-tls-verify'
                    sh 'oc project ' + env.OCP_NS
                }
            }
        }

        // BUILD IMAGE BINARY
        stage('Image Build (Binary Builds)') {
            steps {
                script {

                    container('oc') {
                        // Passiamo il token OCP a Trivy per l'autenticazione al registry
                        sh "oc whoami -t | trivy registry login -u $(oc whoami) --password-stdin ${INTERNAL_REGISTRY}"
                    }
                    
                    dir("catalog-service") {
                        sh 'oc get is catalog-service || oc apply -f ../platform/openshift/catalog-service/imagestream.yaml'
                        sh 'oc get bc catalog-service || oc apply -f ../platform/openshift/catalog-service/buildconfig.yaml'
                        sh 'oc start-build catalog-service --from-dir=. --follow --wait=true || oc logs bc/catalog-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH --format json -o trivy-catalog.json ${env.REGISTRY_URL}/${env.OCP_NS}/catalog-service:latest"

                    dir("isbn-service") {
                        sh 'oc get is isbn-service || oc apply -f ../platform/openshift/isbn-service/imagestream.yaml'
                        sh 'oc get bc isbn-service || oc apply -f ../platform/openshift/isbn-service/buildconfig.yaml'
                        sh 'oc start-build isbn-service --from-dir=. --follow --wait=true || oc logs bc/isbn-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/isbn-service:latest"
                    
                    dir("inventory-service") {
                        sh 'oc get is inventory-service || oc apply -f ../platform/openshift/inventory-service/imagestream.yaml'
                        sh 'oc get bc inventory-service || oc apply -f ../platform/openshift/inventory-service/buildconfig.yaml'
                        sh 'oc start-build inventory-service --from-dir=. --follow --wait=true || oc logs bc/inventory-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/inventory-service:latest"
                    
                    dir("order-service") {
                        sh 'oc get is order-service || oc apply -f ../platform/openshift/order-service/imagestream.yaml'
                        sh 'oc get bc order-service || oc apply -f ../platform/openshift/order-service/buildconfig.yaml'
                        sh 'oc start-build order-service --from-dir=. --follow --wait=true || oc logs bc/order-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/order-service:latest"
                    
                    dir("payment-service") {
                        sh 'oc get is payment-service || oc apply -f ../platform/openshift/payment-service/imagestream.yaml'
                        sh 'oc get bc payment-service || oc apply -f ../platform/openshift/payment-service/buildconfig.yaml'
                        sh 'oc start-build payment-service --from-dir=. --follow --wait=true || oc logs bc/payment-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/payment-service:latest"

                    dir('user-service') {
                        sh 'oc get is user-service || oc apply -f ../platform/openshift/user-service/imagestream.yaml'
                        sh 'oc get bc user-service || oc apply -f ../platform/openshift/user-service/buildconfig.yaml'
                        sh 'oc start-build user-service --from-dir=. --follow --wait=true || oc logs bc/user-service'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/user-service:latest"
                    
                    dir("api-gateway") {
                        sh 'oc get is api-gateway || oc apply -f ../platform/openshift/api-gateway/imagestream.yaml'
                        sh 'oc get bc api-gateway || oc apply -f ../platform/openshift/api-gateway/buildconfig.yaml'
                        sh 'oc start-build api-gateway --from-dir=. --follow --wait=true || oc logs bc/api-gateway'
                    }

                    sh "trivy image --exit-code 1 --severity CRITICAL,HIGH ${env.REGISTRY_URL}/${env.OCP_NS}/api-gateway:latest"
                }
            }
            post {
                always { archiveArtifacts '**/trivy-*.json' }
            }
        }

        // DEPLOY/UPDATE
        stage('Deploy/Update') {
            steps {
                script {
                    
                    sh 'oc apply -f platform/openshift/catalog-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/catalog-service/service.yaml'
                    sh 'oc apply -f platform/openshift/catalog-service/route.yaml'
                    sh 'oc rollout status deploy/catalog-service --timeout=120s || true'

                    sh 'oc apply -f platform/openshift/isbn-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/isbn-service/service.yaml'
                    sh 'oc apply -f platform/openshift/isbn-service/route.yaml'
                    sh 'oc rollout status deploy/isbn-service --timeout=120s || true'
                    
                    sh 'oc apply -f platform/openshift/inventory-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/inventory-service/service.yaml'
                    sh 'oc apply -f platform/openshift/inventory-service/route.yaml'
                    sh 'oc rollout status deploy/inventory-service --timeout=120s || true'
                    
                    sh 'oc apply -f platform/openshift/order-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/order-service/service.yaml'
                    sh 'oc apply -f platform/openshift/order-service/route.yaml'
                    sh 'oc rollout status deploy/order-service --timeout=120s || true'
                    
                    sh 'oc apply -f platform/openshift/payment-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/payment-service/service.yaml'
                    sh 'oc apply -f platform/openshift/payment-service/route.yaml'
                    sh 'oc rollout status deploy/payment-service --timeout=120s || true'

                    sh 'oc apply -f platform/openshift/user-service/deployment.yaml'
                    sh 'oc apply -f platform/openshift/user-service/service.yaml'
                    sh 'oc apply -f platform/openshift/user-service/route.yaml'
                    sh 'oc rollout status deploy/user-service --timeout=120s || true'
                    
                    sh 'oc apply -f platform/openshift/api-gateway/deployment.yaml'
                    sh 'oc apply -f platform/openshift/api-gateway/service.yaml'
                    sh 'oc apply -f platform/openshift/api-gateway/route.yaml'
                    sh 'oc rollout status deploy/api-gateway --timeout=120s || true'
                }
            }
        }

        stage('DAST') {
            parallel {
                stage('DAST OWASP ZAP') {
                    steps {
                        container('zap') {
                            sh "zap-baseline.py -t ${STAGING_FRONTEND_URL} -r zap-report.html"
                        }
                    }
                    post {
                        always { archiveArtifacts 'zap-report.html' }
                    }
                }
                stage('Infrastructure Scan') {
                    steps {
                        container('trivy') {
                            sh "trivy k8s --report=summary cluster --format json -o trivy-k8s-report.json"
                        }
                    }
                    post {
                        always { archiveArtifacts 'trivy-k8s-report.json' }
                    }
                }
            }
        }

        stage('Approvazione in produzione') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input "Deployare in PROD?"
                }
            }
        }

        stage('Pubblicazione Immagini in Prod') {
            steps {
                script {
                    def promotionTasks = [:]
                    def allServices = env.SERVICES_BACKEND + " " + env.SERVICES_FRONTEND

                    allServices.split(' ').each { serviceName ->
                        promotionTasks[serviceName] = {
                            stage("Promote ${serviceName}") {
                                container('oc') {
                                    sh "echo 'Promuovendo ${serviceName} in ${OCP_NS_PROD}...'"
                                    sh "oc tag ${OCP_NS}/${serviceName}:latest ${OCP_NS_PROD}/${serviceName}:latest"
                                }
                            }
                        }
                    }
                    parallel promotionTasks
                }
            }
        }

        stage('Rollout in Prod') {
            steps {
                container('oc') {
                    sh "echo 'Deployando chart Helm in ${OCP_NS_PROD}...'"
                    // Applichiamo il ConfigMap del frontend per la produzione
                    sh "sed 's,namespace: .*,namespace: ${OCP_NS_PROD},g' platform/openshift/bookshop-frontend/configmap.yaml | sed 's,VITE_API_URL: .*,VITE_API_URL: \"${PROD_API_URL}\",g' | oc apply -f - -n ${OCP_NS_PROD}"
                    
                    // Eseguiamo il deploy con Helm, usando l'URL di prod
                    sh """
                    helm upgrade --install bookshop-prod ./platform/helm/bookshop \
                        --namespace ${OCP_NS_PROD} \
                        --set frontend.apiUrl=${PROD_API_URL} \
                        --wait
                    """
                }
            }
        }
    }
}